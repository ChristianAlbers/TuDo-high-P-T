import numpy as np
import matplotlib.pyplot as plt
import TuDo_analytix.XES as XES
import glob

plt.close("all")
plt.ion()
el_path=sorted(glob.glob("XES_elastic_pics/" + "*.tif"))
#path to elastic images or spanish path
spec_path=sorted(glob.glob("XES_spect_pics/" + "*.tif"))
ref_path=sorted(glob.glob("XES_ref_pics/" + "*.tif"))
#path to spectra images

test_elastic=XES.XES_elastics(el_path, np.linspace(10500,10680,7))
#generate elastics_object
test_elastic.calc_params()
#calculate params for energy calibration
#default is m=1 and b=0 to see intensity to pixel
test_spect=XES.XES_object(spec_path, test_elastic)
test_ref=XES.XES_object(ref_path, test_elastic)
#generate spectrum object

test_spect.auto_rois(roiwidth=5)
test_ref.auto_rois(roiwidth=5)
#get automatic rois by searching the maximum pixels with minimum distance of 10
#rois are maximumpeaks +- the roiwidth
#works for this dataset but needs to be used carefully
#alternative test_spect.rois=[[roi1,roi2],[roi1,roi2],...]
test_spect.show_rois()
#shows rois on summed up detectorimages
test_spect.calc_spectrum_all_new(bgrfit=10)
test_ref.calc_spectrum_all_new(bgrwidth=3, bgrfit=10)
#background is generated by rois up and down of signalrois
#background is interpolated to polynom of order 10
#calculate spetrum from all images

spect=test_spect.spectrum.n(7020,7080)
ref=test_ref.spectrum.n(7020,7080)
#normalize spectrum to area between 7020eV and 7120eV
test_spect.check_all_images(roiwidth=5, bgrwidth=3)
#plots all detectorimages with rois and spectra
iad=test_spect.calc_IAD(test_ref.spectrum)
m1_shift=np.round(test_spect.calc_M1()-test_ref.calc_M1(),2)
snr=test_spect.calc_SNR()
#analyse spectra by IAD and M1 analysis and evaluate it

plt.figure()
plt.plot(ref.x,ref.n().y*10,color="C0")
plt.plot(spect.x,spect.n().y*10,color="C1",label= r"$\Delta$M1: "+str(m1_shift) + "\nIAD: "+str(iad) +"\nSNR: "+ str(snr))
plt.plot(spect.x,(spect-ref).y*10-0.25,color="C1")
plt.xlim([7025,7075])
plt.ylim([-0.75,1.25])
plt.xlabel("energy / eV")
plt.ylabel("intensity / arb. units")
plt.legend()
